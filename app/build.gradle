apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.gfx.ribbonizer'
apply plugin: 'dk.nodes.ci.bitrise'
apply plugin: 'kotlin-kapt'


def propFile = rootProject.file("spotify.properties")
def spotifyProps = new Properties()
spotifyProps.load(new FileInputStream(propFile))

def keyFile = rootProject.file("keystore.properties")
def keystoreProps = new Properties()
keystoreProps.load(new FileInputStream((keyFile)))

android {
    compileSdkVersion sdks.compileSdkVersion
    buildToolsVersion sdks.buildToolsVersion
    flavorDimensions "default"

    defaultConfig {
        applicationId "cz.levinzonr.spoton"
        minSdkVersion sdks.minSdkVersion
        targetSdkVersion sdks.targetSdkVersion
        multiDexEnabled true
        versionCode 1
        versionName "0.1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }

        manifestPlaceholders = [
                appId : keys.appId,
                apiKey: keys.apiKey
        ]

        packagingOptions {
            pickFirst("META-INF/atomicfu.kotlin_module")
        }
    }

    // Uncomment the following if you include signingConfigs

    signingConfigs {
        release {
            keyAlias keystoreProps['keyAlias']
            keyPassword keystoreProps['keyAlias']
            storeFile file('../spoton.keystore')
            storePassword keystoreProps['storePassword']
        }
    }

    buildTypes {
        debug {
            // uncomment the following line if you add a flavorbased signingConfig for debug builds
            //signingConfig null
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        production {
            dimension "default"
            deploy = "release"
            hockeyAppId = ""
            manifestPlaceholders = [
                    APP_NAME        : "SpotOn"
            ]
            buildConfigField "String", "CLIENT_ID", "\"${spotifyProps['client_id']}\""
            buildConfigField "String", "CLIENT_SECRET", "\"${spotifyProps['client_secret']}\""
            buildConfigField "String", "REDIRECT_URI", "\"${spotifyProps['redirect_uri']}\""
            buildConfigField "String", "API_URL", "\"https://api.spotify.com/\""
            buildConfigField "String", "API_AUTH_URL", "\"https://accounts.spotify.com/\""
        }
    }
}

repositories {
    mavenLocal()
}

dependencies {
    
    fileTree(dir: "libs", include: ["*.jar"])
    androidTestImplementation("androidx.test.espresso:espresso-core:${versions.espresso}", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    implementation project (':domain')
    implementation project (':presentation')
    implementation project (':data')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation "com.google.android.material:material:$versions.material"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraint_layout}"
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "net.hockeyapp.android:HockeySDK:${versions.hockey_sdk}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    implementation("com.squareup.retrofit2:retrofit:${versions.retrofit}")
    implementation("com.squareup.retrofit2:converter-gson:${versions.retrofit}") {
        exclude module: "retrofit:${versions.retrofit}"
    }
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation("com.squareup.okhttp3:logging-interceptor:4.2.1")

    implementation "dk.nodes.arch:base:${versions.nodes_arch}"
    implementation 'cz.levinzonr.roxie:sdk:1.3-LOCAL'


    // Koin for Android
    implementation "org.koin:koin-android:${versions.koin}"
    // Koin Android Scope features
    implementation "org.koin:koin-android-scope:${versions.koin}"
    // Koin Android ViewModel features
    implementation "org.koin:koin-android-viewmodel:${versions.koin}"
    // Koin Android Experimental features
    implementation "org.koin:koin-android-ext:${versions.koin}"

    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'


    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"

    implementation "io.reactivex.rxjava2:rxandroid:${versions.rx_android}"
    implementation "io.reactivex.rxjava2:rxjava:${versions.rx_java}"
    implementation "io.reactivex.rxjava2:rxkotlin:${versions.rx_kotlin}"

    // Testing
    testImplementation "junit:junit:${versions.junit}"
    // required if you want to use Mockito for unit tests
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    // required if you want to use Mockito for Android tests
    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"

    //For Espresso UI testing
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.espresso}"

    // The following section is only used to force the latest version to resolve conflicts
    implementation "androidx.arch.core:core-common:$versions.archCore"
    implementation "androidx.arch.core:core-runtime:$versions.archCore"
    implementation "androidx.lifecycle:lifecycle-livedata-core:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-runtime:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-common:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata:${versions.lifecycle}"
    kapt "androidx.lifecycle:lifecycle-compiler:${versions.lifecycle}"
    implementation "androidx.core:core-ktx:${versions.ktx}"

    implementation project(':spotify-app-remote-release-0.6.3')

}
